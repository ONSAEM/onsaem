<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.onsaem.web.course.mapper.ClassMapper">
	
	<sql id="condition">
		<if test="className">
				AND C.CLASS_NAME LIKE '%' || #{className} || '%'
			</if>
			<if test="classAddr">
				AND C.CLASS_ADDR LIKE '%' || #{classAddr} || '%'
			</if>
			<if test="startDate">
			<![CDATA[
				AND L.START_DATE >= #{startDate}
				]]>
			</if>
			<if test="endDate">
			<![CDATA[
				AND L.END_DATE < #{endDate}
				]]>
			</if>
			<if test="minPrice">
				<![CDATA[
					AND C.PRICE >= #{minPrice}
				]]>
			</if>
			<if test="maxPrice">
				<![CDATA[
					AND C.PRICE <= #{maxPrice}
				]]>
			</if>
	</sql>
	
	<select id="getClassList" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
		SELECT * FROM ( SELECT ROWNUM RN, A.* FROM (
		SELECT  C.CLASS_ID,  C.CLASS_NAME,  C.PRICE,  C.CLASS_TIME, C.CLASS_GROUP, NVL(TRUNC(AVG(R.REVIEW_STAR),1),0) AS STAR, M.FILE_NAME, M.FILE_ROUTE, M.MEDIA_NAME
		FROM CLASS_INFO C, REVIEWS R, MEDIA M, CLASSES L
        WHERE  C.CLASS_ID = R.GROUP_ID(+)
        AND C.CLASS_ID = M.GROUP_ID
        AND C.CLASS_ID = L.CLASS_ID(+)
        AND M.SUB_GROUP = '대표이미지'
		<include refid="condition"/>
		GROUP BY C.CLASS_ID,  C.CLASS_NAME,  C.PRICE,  C.CLASS_TIME, C.CLASS_GROUP, M.FILE_NAME, M.FILE_ROUTE, M.MEDIA_NAME
		<choose>
		<when test="'OD0'.equals(orderId)"> ORDER BY C.CLASS_ID </when>
    	<when test="'OD1'.equals(orderId)"> ORDER BY STAR DESC </when>
    	<when test="'OD2'.equals(orderId)"> ORDER BY C.PRICE DESC  </when>
    	<when test="'OD3'.equals(orderId)"> ORDER BY C.PRICE  </when>
		</choose>
			<![CDATA[
				)A WHERE ROWNUM <= #{last} ) WHERE RN >= #{first}
			]]>
	</select>
	
	<select id="getClass" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
		SELECT  C.CLASS_ID,  C.CLASS_NAME,  C.PRICE,  C.CLASS_TIME, C.EXPLANATION, C.CLASS_GROUP, C.DIFFICULTY, NVL(TRUNC(AVG(R.REVIEW_STAR),1),0) AS STAR, COUNT(R.REVIEW_ID) AS REVIEW_COUNT
		FROM CLASS_INFO C, REVIEWS R
        WHERE  C.CLASS_ID = R.GROUP_ID(+)
        AND C.CLASS_ID = #{classId}
        GROUP BY C.CLASS_ID,  C.CLASS_NAME,  C.PRICE,  C.CLASS_TIME, C.EXPLANATION, C.CLASS_GROUP, C.DIFFICULTY
	</select>
	
	<select id="classMediaList" resultType="MediaVO" parameterType="ClassInfoVO">
		SELECT *
		from MEDIA
		WHERE GROUP_ID = #{classId}
		ORDER BY SUB_GROUP
	</select>
	
	<select id="classCount" resultType="Paging" parameterType="ClassInfoVO">
		SELECT  COUNT(C.CLASS_ID) AS TOTAL_RECORD
		FROM CLASS_INFO C, CLASSES L
		WHERE C.CLASS_ID = L.CLASS_ID(+)
			<include refid="condition"/>
	</select>
	
	<select id="classMaxPrice" resultType="int" parameterType="ClassInfoVO">
		SELECT  MAX(C.PRICE)
		FROM CLASS_INFO C, CLASSES L
		WHERE C.CLASS_ID = L.CLASS_ID(+)
			<include refid="condition"/>
	</select>
	
	<select id="classMinPrice" resultType="int" parameterType="ClassInfoVO">
		SELECT  MIN(C.PRICE)
		FROM CLASS_INFO C, CLASSES L
		WHERE C.CLASS_ID = L.CLASS_ID(+)
			<include refid="condition"/>
	</select>
	
		<!-- 좋아요 조회 -->
 	<select id="classLikeCount" resultType="String" parameterType="String">
 		select case when count(*) != 0 then 'Y' else 'F' end as like_count
		from likes
		where member_id = #{memberId}
		and group_id = #{groupId}
 	</select>
 	
 	<!-- 좋아요 추가 -->
 	<insert id="addClassLike" parameterType="LikeVO">
 		<selectKey keyProperty="likeId" resultType="String" order="BEFORE">
 			SELECT 'LK'||LPAD(LK_SEQ.NEXTVAL,3,0) FROM DUAL
 		</selectKey>
 		INSERT INTO LIKES(LIKE_ID,
					 MEMBER_ID,
					 GROUP_ID)
		VALUES (#{likeId}, <!-- 시퀀스 -->
				#{memberId}, <!-- 누른 사람의 아이디 -->
				#{groupId})
 	</insert>
 	
 	<!-- 좋아요 삭제 -->
 	<delete id="delClassLike" parameterType="String">
 		DELETE FROM LIKES
		WHERE
		GROUP_ID=#{groupId}
		AND MEMBER_ID=#{memberId}
 	</delete>
	
	
	<!-- [위는 완성 아래는 미완성] -->
	<select id="popularClassList">
	
	</select>
	


	
	<insert id="classInfoInsert">

	</insert>

	<update id="classInfoUpdate">

	</update>

	<insert id="classInsert">

	</insert>

	<update id="classUpdate">

	</update>

</mapper>