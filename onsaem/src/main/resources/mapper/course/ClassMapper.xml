<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.onsaem.web.course.mapper.ClassMapper">

	<sql id="condition">
		<if test="className != null and className !=''">
			AND C.CLASS_NAME LIKE '%' || #{className} || '%'
		</if>
		<if test="classAddr != null and classAddr !=''">
			AND C.CLASS_ADDR LIKE '%' || #{classAddr} || '%'
		</if>
		<if test="startDate != null and startDate !=''">
			<![CDATA[
				AND L.START_DATE >= #{startDate}
				]]>
		</if>
		<if test="endDate != null and endDate !=''">
			<![CDATA[
				AND L.END_DATE < #{endDate}
				]]>
		</if>
		<if test="minPrice != null and minPrice !=''">
				<![CDATA[
					AND C.PRICE >= #{minPrice}
				]]>
		</if>
		<if test="maxPrice != null and maxPrice !=''">
				<![CDATA[
					AND C.PRICE <= #{maxPrice}
				]]>
		</if>
	</sql>

	<!-- 클래스정보 전체조회 -->
	<select id="getClassInfoList" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
		SELECT * FROM ( SELECT ROWNUM RN, A.* FROM (
		SELECT C.CLASS_ID,
		C.CLASS_NAME, C.PRICE, C.CLASS_TIME,
		NVL(TRUNC(AVG(R.REVIEW_STAR),1),0) AS STAR
		FROM CLASS_INFO C, REVIEWS
		R, CLASSES L
		WHERE
		C.CLASS_ID = R.GROUP_ID(+)
		AND C.CLASS_ID =
		L.CLASS_ID(+)
		<include refid="condition" />
		GROUP BY C.CLASS_ID, C.CLASS_NAME, C.PRICE, C.CLASS_TIME
		<choose>
			<when test="'OD0'.equals(orderId)"> ORDER BY C.CLASS_ID </when>
			<when test="'OD1'.equals(orderId)"> ORDER BY STAR DESC </when>
			<when test="'OD2'.equals(orderId)"> ORDER BY C.PRICE DESC  </when>
			<when test="'OD3'.equals(orderId)"> ORDER BY C.PRICE  </when>
		</choose>
			<![CDATA[
				)A WHERE ROWNUM <= #{last} ) WHERE RN >= #{first}
			]]>
	</select>

	<!-- 클래스정보 단건조회 -->
	<select id="getClassInfo" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
		SELECT C.CLASS_ID, C.CLASS_NAME, C.PRICE, C.CLASS_TIME,
		C.EXPLANATION, C.DIFFICULTY, C.MEMBER_ID,
		NVL(TRUNC(AVG(R.REVIEW_STAR),1),0) AS STAR, COUNT(R.REVIEW_ID) AS
		REVIEW_COUNT
		FROM CLASS_INFO C, REVIEWS R
		WHERE C.CLASS_ID =
		R.GROUP_ID(+)
		AND C.CLASS_ID = #{classId}
		GROUP BY C.CLASS_ID,
		C.CLASS_NAME, C.PRICE, C.CLASS_TIME, C.EXPLANATION,
		C.DIFFICULTY,
		C.MEMBER_ID
	</select>

	<!-- 클래스 갯수 조회 -->
	<select id="classCount" resultType="Paging"
		parameterType="ClassInfoVO">
		SELECT COUNT(C.CLASS_ID) AS TOTAL_RECORD
		FROM CLASS_INFO C, CLASSES L
		WHERE C.CLASS_ID = L.CLASS_ID(+)
		<include refid="condition" />
	</select>

	<!-- 클래스 최대금액 -->
	<select id="classMaxPrice" resultType="int"
		parameterType="ClassInfoVO">
		SELECT MAX(C.PRICE)
		FROM CLASS_INFO C, CLASSES L
		WHERE C.CLASS_ID =
		L.CLASS_ID(+)
		<include refid="condition" />
	</select>

	<!-- 클래스 최소금액 -->
	<select id="classMinPrice" resultType="int"
		parameterType="ClassInfoVO">
		SELECT MIN(C.PRICE)
		FROM CLASS_INFO C, CLASSES L
		WHERE C.CLASS_ID =
		L.CLASS_ID(+)
		<include refid="condition" />
	</select>

	<!-- 좋아요 갯수 -->
	<select id="LikeCount" resultType="int" parameterType="String">
		SELECT
		COUNT(*) AS COUNT
		FROM LIKES
		WHERE GROUP_ID =
		#{groupId}
	</select>

	<!-- 좋아요 체크 -->
	<select id="LikeCheck" resultType="String"
		parameterType="LikeVO">
		SELECT CASE WHEN COUNT(*) != 0 THEN 'Y' ELSE 'F' END AS
		LIKE_CK
		FROM LIKES
		WHERE MEMBER_ID = #{memberId}
		AND GROUP_ID =
		#{groupId}
	</select>

	<!-- 좋아요 추가 -->
	<insert id="addClassLike" parameterType="LikeVO">
		<selectKey keyProperty="likeId" resultType="String"
			order="BEFORE">
			SELECT 'LK'||LPAD(LK_SEQ.NEXTVAL,3,0) FROM DUAL
		</selectKey>
		INSERT INTO LIKES(LIKE_ID,
		MEMBER_ID,
		GROUP_ID, GROUPS)
		VALUES
		(#{likeId},
		#{memberId},
		#{groupId}, '클래스')
	</insert>

	<!-- 좋아요 삭제 -->
	<delete id="delClassLike" parameterType="LikeVO">
		DELETE FROM LIKES
		WHERE
		GROUP_ID=#{groupId}
		AND MEMBER_ID=#{memberId}
	</delete>

	<!-- 클래스 신고 -->
	<insert id="insertReport" parameterType="ReportVO">
		INSERT INTO
		REPORTS(REPORT_ID, FROM_ID, TO_ID,
		REASON, DETAIL_REASON, GROUPS,
		GROUP_ID)
		VALUES('R'||LPAD(REPORT_SEQ.NEXTVAL,3,0),#{fromId},(SELECT
		MEMBER_ID
		FROM CLASS_INFO WHERE CLASS_ID=#{groupId}),#{reason}
		,#{detailReason},'클래스',#{groupId})
	</insert>

	<!-- 클래스 한건 가져오기 -->
	<select id="getClass" resultType="ClassVO"
		parameterType="ClassVO">
		SELECT CLASSES.*, (SELECT COUNT(*) FROM BOOKINDS WHERE
		C_NO = CLASSES.C_NO)
		AS BOOKING_PEOPLE
		FROM CLASSES
		WHERE C_NO = #{cNo}
	</select>

	<!-- 클래스 목록 가져오기 -->
	<select id="getDateList" resultType="ClassVO"
		parameterType="ClassVO">
		<![CDATA[
		SELECT *
        FROM (SELECT TO_CHAR(START_DATE, 'FMYYYY/MM/DD') AS CLASS_DATE, TOTAL_PEOPLE, (SELECT NVL(SUM(TOTAL_PEOPLE),0) FROM BOOKINDS WHERE
		C_NO = CLASSES.C_NO) AS BOOKING_PEOPLE
		FROM CLASSES
		WHERE CLASS_ID = #{classId}
		AND TO_CHAR(START_DATE, 'YYYY-MM-DD HH24') > TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH24')
		AND STATUS = '등록') C
		WHERE C.TOTAL_PEOPLE > C.BOOKING_PEOPLE
		]]>
	</select>


	<!-- 클래스 목록 가져오기 -->
	<select id="getclassList" resultType="ClassVO"
		parameterType="ClassVO">
		<![CDATA[
		SELECT *
        FROM (SELECT C_NO, CLASS_ID, TO_CHAR(START_DATE, 'HH24:MI') AS START_TIME, TO_CHAR(END_DATE, 'HH24:MI') AS END_TIME, TOTAL_PEOPLE, (SELECT NVL(SUM(TOTAL_PEOPLE),0) FROM BOOKINDS WHERE
		C_NO = CLASSES.C_NO) AS BOOKING_PEOPLE
		FROM CLASSES
		WHERE CLASS_ID = #{classId}
		AND TO_CHAR(START_DATE, 'YYYY-MM-DD') = TO_DATE(#{classDate}, 'YYYY-MM-DD')
		AND TO_CHAR(START_DATE, 'YYYY-MM-DD HH24') > TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH24')
		AND STATUS = '등록') C
        WHERE C.TOTAL_PEOPLE > C.BOOKING_PEOPLE
		]]>
	</select>

	<!-- 좋아요 전체조회 -->
	<select id="getLikeList" resultType="LikeVO"
		parameterType="LikeVO">
		select *
		from likes
		where member_id = #{memberId}
		AND
		GROUPS = '클래스'
	</select>

	<!-- 좋아요 전체삭제 -->
	<delete id="delAllLike" parameterType="LikeVO">
		DELETE FROM LIKES
		WHERE
		GROUPS = '클래스'
		AND MEMBER_ID=#{memberId}
	</delete>

	<!-- 강사클래스정보 전체조회 -->
	<select id="getMyClassInfoList" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
		<![CDATA[
		SELECT *
		FROM CLASS_INFO
		WHERE CLASS_DATE > (CURRENT_DATE - 30)
		AND MEMBER_ID =#{memberId}
		ORDER BY CLASS_DATE DESC
		]]>
	</select>

	<!-- 강사클래스정보 전체조회 -->
	<select id="getAdminClassList" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
	<![CDATA[
		SELECT *
		FROM CLASS_INFO
		WHERE CLASS_DATE > (CURRENT_DATE - 30)
		ORDER BY CLASS_DATE DESC
		]]>
	</select>

	<!-- 강사클래스정보 전체조회 -->
	<select id="getAdminCApplyList" resultType="ClassInfoVO"
		parameterType="ClassInfoVO">
	<![CDATA[
		SELECT *
		FROM CLASS_INFO
		WHERE CLASS_DATE > (CURRENT_DATE - 30)
		AND STATUS in ('신청','수정')
		ORDER BY CLASS_DATE DESC
		]]>
	</select>

	<!-- [위는 완성 아래는 미완성] -->
	<select id="popularClassList">

	</select>

	<insert id="classInfoInsert">

	</insert>

	<update id="classInfoUpdate">

	</update>

	<insert id="classInsert">

	</insert>

	<update id="classUpdate">

	</update>

</mapper>