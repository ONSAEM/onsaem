<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.onsaem.web.blog.mapper.BlogMapper">
 	<!-- 블로그 전체 조회 -->
 	<select id="taskList" resultType="BlogVO" parameterType="BlogVO">
 		SELECT * 
 		FROM BLOGS
 	</select>
 	
 	<!-- 단건 조회 -->
 	<select id="getBlogInfo" resultType="BlogVO" parameterType="String">
	 	SELECT  B.BLOG_ID,
		        B.BLOG_NAME,
		        B.INTRODUCTION,
		        B.BLOG_URL,
		        M.NICKNAME,
		        F.file_route,
                H.file_route as headerImg
		  FROM  BLOGS B,
		        MEMBERS M, 
		        (select * 
		           from MEDIA
                  where STATUS = 'true' 
                    and sub_group='프로필이미지') F,
                (select * 
		           from MEDIA
                  where STATUS = 'true' 
                    and sub_group='헤더이미지') H
	     WHERE  B.BLOG_ID = M.MEMBER_ID
		   and  M.member_id = F.group_id(+)
           and  M.member_id = H.group_id(+)
		   AND  M.member_id= #{memberId}
	</select>
	
	
	<!-- 구독 조회 -->
	<select id="subCount" resultType="String" parameterType="String">
		SELECT CASE WHEN COUNT(*) != 0 THEN 'T' ELSE 'F' END AS SUB_COUNT
		FROM LIKES
		WHERE GROUP_ID= #{groupId} 
		AND MEMBER_ID = #{memberId} 
	</select>
	
	<!-- 구독 추가 -->
	<insert id="addSub" parameterType="LikeVO">
		<selectKey keyProperty="likeId" resultType="String" order="BEFORE">
 			SELECT 'LK'||LPAD(LK_SEQ.NEXTVAL,3,0) FROM DUAL
 		</selectKey>
 		INSERT INTO LIKES(LIKE_ID,
					 MEMBER_ID,
					 GROUP_ID,
					 GROUPS,
					 INSERT_DATE)
		VALUES (#{likeId}, <!-- 시퀀스 -->
				#{memberId}, <!-- 구독 당한 사람의 아이디 -->
				#{groupId}, <!-- 구독한 사람의 아이디 -->
				'구독',
				current_date)
	</insert>
	
	<!-- 구독 삭제 -->
	<delete id="delSub" parameterType="String">
		DELETE FROM LIKES
		 WHERE GROUP_ID = #{groupId}
		   AND MEMBER_ID = #{memberId}
	</delete>
	
	<!-- 나를 구독한 사람 목록 조회 -->
	<select id="subMeList" resultType="LikeVO" parameterType="String">
		select  l.LIKE_ID,
            l.MEMBER_ID,
            l.GROUP_ID,
            l.GROUPS,
            l.INSERT_DATE,
            m.file_route 
	      from  likes l, media m
	     where l.member_id = m.group_id(+)
	     and m.sub_group ='프로필이미지'
	     and m.status = 'true'
	     and l.groups = '구독'
	     and l.group_id = #{groupId}
	     <if test="rownum != null and rownum !=''">
				<![CDATA[
				and rownum <= #{rownum}
				]]>
		</if>
	</select>
	
	<!-- 내가 구독한 사람 목록 조회 -->
	<select id="mySubList" resultType="LikeVO" parameterType="String">
		select  l.LIKE_ID,
		        l.MEMBER_ID,
		        l.GROUP_ID,
		        l.GROUPS,
		        l.INSERT_DATE,
		        m.file_route
		from likes l, media m
		where l.group_id = m.group_id --내가 구독하는 사람들의 이미지를 땡겨오기 위해서
		and l.groups = '구독'
		and m.sub_group ='프로필이미지'
		and m.status = 'true'
		and l.member_id = #{memberId}
		<if test="rownum != null and rownum !=''">
				<![CDATA[
				and rownum <= #{rownum}
				]]>
		</if>
	</select>


	<!-- 블로그 정보 등록 -->
	<update id="updateInfo" parameterType="BlogVO">
		update blogs set blog_name = #{blogName},
		               introduction = #{introduction} 
		 where blog_id = #{blogId}
	</update>
	
	<!-- 카테고리 등록 -->
	<insert id="cateInsert" parameterType="CategoriesVO">
		<selectKey keyProperty="categoryId" resultType="String" order="BEFORE">
 			SELECT 'CT'||LPAD(CATE_SEQ.NEXTVAL,3,0) FROM DUAL
 		</selectKey>
 			insert into categories (CATEGORY_ID,
									CATEGORY_NAME,
									BLOG_ID,
									ORDER_NUM,
									PUBLIC_SCOPE)
				 values (#{categoryId},
				  		 #{categoryName},
				  		 #{blogId}, 
				  		 cate_order_seq.nextval, 
				  		 #{publicScope})
	</insert>
	
	<!-- 카테고리 삭제 -->
	<delete id="cateDelete" parameterType="String">
		delete from categories
		 where category_id=#{categoryId}
	</delete>
	
	
	<!-- ADMIN -->
	
	
	<select id="blogReportList" resultType="ReportVO" parameterType="ReportVO">
		select Rownum rn, r.*, m.nickname,
			   (select count(*)
                  from reports
                 where to_id = r.to_id) report_cnt
		  from (select * from reports
		<where>
			<if test="groups != null and groups !=''">
				groups = #{groups}
			</if>
			<if test="filterPeriod != null and filterPeriod !=''">
				<![CDATA[
				and report_date >= current_date - #{filterPeriod}
				]]>
			</if>
			<if test="filterStatus != null and filterStatus !=''">
				and status = #{filterStatus}
			</if>
		</where>
		order by report_date DESC) r, members m
		where r.to_id = m.member_id
	</select>
	
	
	<!-- 	제제기간 업데이트 -->
	<update id="banUpdate" parameterType="MemberVO">
		update members set bandate = current_date + #{banPeriod}
		 where member_id = #{memberId}
	</update>
	<!-- 	제제상태 업데이트 -->
	<update id="banStatusUpdate" parameterType="ReportVO">
		update reports set status = '처리완료'
		where report_id = #{reportId}
	</update>
	
	
 </mapper>