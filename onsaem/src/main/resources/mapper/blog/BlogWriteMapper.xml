<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="com.onsaem.web.blog.mapper.BlogWriteMapper">
 	
 	
 	<sql id="condition">
 		<if test="blogWriteVO.writeTitle">
			AND b.write_title LIKE '%' || #{blogWriteVO.writeTitle} || '%'
		</if>
		<if test="blogWriteVO.categoryId">
			AND b.category_id = #{blogWriteVO.categoryId}
		</if>
 	</sql>
 	
 	<!-- 페이징 -->
 	<select id="blogCount" resultType="Paging" parameterType="BlogWriteVO">
		select count(*) as total_record
		  from blog_writes
		 where blog_id = #{blogId}
	</select>
	
	<!-- 블로그 글 페이징 조회 -->
	<select id="getBlogPageList" resultType="BlogWriteVO"
		parameterType="BlogWriteVO">
		SELECT * FROM ( SELECT ROWNUM RN, A.* FROM (
		SELECT 	b.WRITE_ID,b.BLOG_ID,b.WRITE_TITLE,b.SUBTITLE,b.CATEGORY_ID,
    			b.PUBLIC_SCOPE,b.BLOG_WRITE,b.CNT,b.LIKE_NUMBER,b.WRITE_DATE,m.nickname,
    			(select count(r.reply_id)
    			from replies r 
    			START WITH b.write_id = r.group_id
    			CONNECT BY PRIOR r.reply_id = r.group_id )as replyCnt
		  FROM  BLOG_WRITES b, members m
		 WHERE  b.blog_id = m.member_id
		   and  blog_id=#{blogWriteVO.blogId}
		   <include refid="condition" />
 		 order  by b.write_date DESC
			<![CDATA[
				)A WHERE ROWNUM <= #{paging.last} ) WHERE RN >= #{paging.first}
			]]>
	</select>
	
 	
 	<!-- 전체 조회 -->
 	<select id="getBlogList" resultType="BlogWriteVO" parameterType="BlogWriteVO">
 		SELECT *
 		FROM BLOG_WRITES
 	</select>
 	<!-- 단건 조회 -->
 	<select id="getBlog" resultType="BlogWriteVO" parameterType="String">
		SELECT  B.WRITE_ID,
		        B.BLOG_ID,
		        B.WRITE_TITLE,
		        B.SUBTITLE,
		        B.CATEGORY_ID,
		        B.PUBLIC_SCOPE,
		        B.BLOG_WRITE,
		        B.CNT,
		        B.LIKE_NUMBER,
		        B.WRITE_DATE,
		        C.CATEGORY_NAME,
		        M.NICKNAME,
                F.file_route
		  FROM  BLOG_WRITES B, 
		        CATEGORIES C,
		        MEMBERS M,
                (select * 
		           from MEDIA
                  where STATUS = 'true' 
                    and sub_group='프로필이미지') F
		 WHERE  B.CATEGORY_ID = C.CATEGORY_ID(+)
           and  B.BLOG_ID = M.MEMBER_ID
           and  B.blog_id = F.group_id(+)
		   AND  WRITE_ID = #{writeId}
 	</select>
 	<!-- 블로그 단건 조회 -->
 	<select id="myBlog" resultType="BlogWriteVO" parameterType="String">
		SELECT 	b.WRITE_ID,b.BLOG_ID,b.WRITE_TITLE,b.SUBTITLE,b.CATEGORY_ID,
    			b.PUBLIC_SCOPE,b.BLOG_WRITE,b.CNT,b.LIKE_NUMBER,b.WRITE_DATE,m.nickname,
    			(select count(r.reply_id)from replies r WHERE b.write_id = r.group_id )as replyCnt
		  FROM  BLOG_WRITES b, members m
		 WHERE  b.blog_id = m.member_id
		   and  blog_id=#{blogId}
 		 order  by b.write_date DESC
 	</select>
 	<!-- 글 등록 -->
 	<insert id="blogInsert" parameterType="blogWriteVO">
 		<selectKey keyProperty="writeId" resultType="String" order="BEFORE">
 			select 'BW'||lpad(blog_seq.nextval,3,0) from dual
 		</selectKey>
 		INSERT INTO BLOG_WRITES( WRITE_ID,
								BLOG_ID,
								WRITE_TITLE,
								SUBTITLE,
								CATEGORY_ID,
								PUBLIC_SCOPE,
								BLOG_WRITE,
								CNT,
								LIKE_NUMBER,
								WRITE_DATE )
		VALUES (#{writeId},
				#{blogId},	
				#{writeTitle},
				#{subTitle},
				#{categoryId},
				#{publicScope},
				#{blogWrite},
				0,
				0,
				current_date)
 	</insert>
 	
 	<!-- 글 삭제 -->
 	<delete id="blogDelete" parameterType="String">
 		delete from blog_writes
 		where write_id = #{writeId}
 	</delete>
 	
 	
 	<!-- 글 수정 -->
 	<update id="blogUpdate" parameterType="blogWriteVO">
 		UPDATE BLOG_WRITES
 			SET WRITE_TITLE = #{writeTitle},
 			 	SUBTITLE = #{subTitle},
 			 	CATEGORY_ID = #{categoryId},
 			 	PUBLIC_SCOPE = #{publicScope},
 			 	BLOG_WRITE = #{blogWrite},
 			 	WRITE_DATE = CURRENT_DATE
 		where BLOG_ID = #{blogId}
 		and WRITE_ID = #{writeId}
 	</update>
 	
 	
 	<!-- 좋아요 조회 -->
 	<select id="likeCount" resultType="String" parameterType="String">
 		select case when count(*) != 0 then 'Y' else 'F' end as like_count
		from likes
		where member_id = #{memberId}
		and group_id = #{groupId}
 	</select>
 	
 	<!-- 좋아요 추가 -->
 	<insert id="addBlogLike" parameterType="LikeVO">
 		<selectKey keyProperty="likeId" resultType="String" order="BEFORE">
 			SELECT 'LK'||LPAD(LK_SEQ.NEXTVAL,3,0) FROM DUAL
 		</selectKey>
 		INSERT INTO LIKES(LIKE_ID,
					 MEMBER_ID,
					 GROUP_ID,
					 GROUPS,
					 INSERT_DATE)
		VALUES (#{likeId}, <!-- 시퀀스 -->
				#{memberId}, <!-- 누른 사람의 아이디 -->
				#{groupId}, <!-- 글 번호 -->
				'블로그',
				current_date)
 	</insert>
 	
 	<!-- 좋아요 삭제 -->
 	<delete id="delBlogLike" parameterType="String">
 		DELETE FROM LIKES
		WHERE
		GROUP_ID=#{groupId}
		AND MEMBER_ID=#{memberId}
 	</delete>
 	
 	<!-- 그룹 아이디가 같은 경우에만 카운트하기(한 게시글에서 좋아요 수 조회) -->
 	<select id="cntBlogLike" resultType="LikeVO" parameterType="String">
 		select count(*) as count
 		from likes
 		where group_id = #{groupId}
 	</select>
 	
	<!--해당 유저의 카테고리 조회 -->
	<select id="cateList" resultType="CategoriesVO" parameterType="String">
		select category_id,category_name, blog_id, order_num, public_scope
		from categories
		where blog_id=#{blogId}
		order by order_num
	</select>
 	
 	<!-- 최근글 3개 조회 -->
 	<select id="recentWrite" resultType="blogWriteVO" parameterType="String">
		select * 
		from (select * 
		      from blog_writes
		      where blog_id=#{blogId}
		      order by write_date DESC)
		      <![CDATA[
		where rownum <=3
		]]>
 	</select>
 	
 	<!-- 신고 등록 -->
	<insert id="addBan"
		parameterType="com.onsaem.web.common.service.ReportVO">
		INSERT INTO REPORTS
		VALUES('R'||LPAD(REPORT_SEQ.NEXTVAL,3,0),#{fromId},#{toId},CURRENT_DATE,#{reason}
		,#{detailReason},'신고대기','블로그',#{groupId})
	</insert>
 	
 	<!-- 조회수 -->
 	<update id="updateCnt" parameterType="blogWriteVO">
		update blog_writes set cnt = cnt+1
		where write_id = #{writeId}
	</update>
 	
 	<!-- 메인 인기글 6개 -->
 	<select id="hotBlogList" resultType="BlogWriteVO" parameterType="BlogWriteVO">
		SELECT 	b.WRITE_ID,b.BLOG_ID,b.WRITE_TITLE,b.SUBTITLE,b.CATEGORY_ID,
    			b.PUBLIC_SCOPE,b.BLOG_WRITE,b.CNT,b.LIKE_NUMBER,b.WRITE_DATE,m.nickname,
    			(select count(r.reply_id)
    			from replies r 
    			START WITH b.write_id = r.group_id
    			CONNECT BY PRIOR r.reply_id = r.group_id )as replyCnt,
                (select count(l.like_id) from likes l
                 where groups = '블로그'
                 and b.write_id = l.group_id)as likeCnt
		  FROM  BLOG_WRITES b, members m
		 WHERE  b.blog_id = m.member_id
           and  public_scope = 'public'
           and  b.write_date >= current_date-30
           <![CDATA[
           and  b.write_date <= current_date
           and  rownum <= 6
           ]]>
 		 order  by b.cnt+replyCnt+likeCnt DESC 
	</select>
 	
 	
<!--  	밑에는 수정중 -->
 	
 	<!-- 내 블로그 제목 검색 (보류)-->
 	<select id="searchWrite" resultType="blogWriteVO" parameterType="String">
 		select *
		from blog_writes
		where write_title like '%'||#{data}||'%'
		and blog_id=#{blogId}
		order by write_date DESC
 	</select>
 	
	<!-- 블로그 메인 제목 검색 -->
	<select id="searchMain" resultType="blogWriteVO" parameterType="String">
		select *
		from blog_writes
		where write_title like '%'||#{data}||'%'
		order by write_date DESC
	</select>
 	
 	
 </mapper>