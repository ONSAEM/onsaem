<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onsaem.web.member.mapper.MemberMapper">

	<!-- 로그인 아이디, 비밀번호 찾기 -->
	<select id="getMember" resultType="MemberVO"
		parameterType="String">
		SELECT M.PASSWORD, M.NICKNAME, M.EMAIL, M.PHONE,
		M.POSTAL_CODE, M.ADDR,
		M.DETAIL_ADDR, M.BANK AS BANK_CODE , M.BANK_ACCOUNT,
		M.BUSINESS_NUMBER, M.ROLE, M.POINT,
		M.MEMBER_ID, M.NAME, F.FILE_NAME,
		F.FILE_ROUTE, C.CODE_NAME AS BANK
		FROM MEMBERS M , (select* from MEDIA
		where STATUS = 'true') F, COMMONS C
		WHERE M.MEMBER_ID = F.GROUP_ID(+)
		AND M.BANK = C.CODE_ID(+)
		AND M.MEMBER_ID = #{memberId}
		AND M.STATUS !=
		'false'
		<![CDATA[
		AND M.BANDATE < SYSDATE
		]]>
	</select>

	<!-- 아이디체크 -->
	<select id="checkId" resultType="MemberVO"
		parameterType="String">
		SELECT MEMBER_ID
		FROM MEMBERS
		WHERE MEMBER_ID =
		#{memberId}

		UNION ALL

		SELECT MEMBER_ID
		FROM APPLY_MEMBERS
		WHERE MEMBER_ID
		= #{memberId}
	</select>

	<!-- 이메일로 회원조회 -->
	<select id="searchEmail" resultType="int" parameterType="String">
		SELECT
		COUNT(*) FROM MEMBERS
		WHERE EMAIL = #{email}
	</select>

	<!-- 회원등록 -->
	<insert id="insertMember" parameterType="MemberVO">
		INSERT INTO MEMBERS
		(MEMBER_ID, PASSWORD, NAME, NICKNAME, EMAIL, PHONE,
		POSTAL_CODE, ADDR,
		DETAIL_ADDR, BANK, BANK_ACCOUNT, ROLE)
		VALUES(#{memberId}, #{password},
		#{name}, #{nickname}, #{email},
		#{phone}, #{postalCode}, #{addr},
		#{detailAddr}, #{bank},
		#{bankAccount}, 'ROLE_USER')
	</insert>

	<!-- 블로그등록 -->
	<insert id="inserBlog" parameterType="MemberVO">
		INSERT INTO BLOGS
		(BLOG_ID,BLOG_NAME,BLOG_URL)
		VALUES
		(#{memberId},#{nickname},'http://localhost/blog/myblog?userId='||#{memberId})
	</insert>

	<!-- 이메일로 아이디 조회 -->
	<select id="idEmail" resultType="MemberVO"
		parameterType="String">
		SELECT RPAD(SUBSTR(MEMBER_ID,1,3),LENGTH(MEMBER_ID),'*')
		AS MEMBER_ID FROM MEMBERS
		WHERE EMAIL = #{email}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePw" parameterType="MemberVO">
		UPDATE MEMBERS
		SET PASSWORD =
		#{password}
		WHERE EMAIL = #{email}
	</update>

	<!-- 회원정보 변경 -->
	<update id="updateMember" parameterType="MemberVO">
		UPDATE MEMBERS
		SET
		PASSWORD = #{password},
		NICKNAME = #{nickname},
		EMAIL = #{email},
		PHONE =
		#{phone},
		POSTAL_CODE = #{postalCode},
		ADDR = #{addr},
		DETAIL_ADDR =
		#{detailAddr},
		BANK = #{bank},
		BANK_ACCOUNT = #{bankAccount},
		NAME =
		#{name}
		WHERE MEMBER_ID = #{memberId}
	</update>

	<!-- 회원탈퇴 DB삭제 X 상태만 변경 -->
	<update id="deleteMember" parameterType="MemberVO">
		UPDATE MEMBERS
		SET STATUS
		= 'false',
		BANDATE = (current_date + 30)
		WHERE MEMBER_ID = #{memberId}
	</update>

	<!-- 회원정보리스트 (현재기준 한달) -->
	<select id="memberList"
		resultType="com.onsaem.web.member.service.MemberVO">
		SELECT * FROM MEMBERS
		WHERE
		<![CDATA[TO_CHAR(SIGNUPDATE,'YYYY-MM-DD')>=TO_CHAR( CURRENT_DATE-( (SELECT
		TO_CHAR(CURRENT_DATE,'D') FROM DUAL) -2 )-15, 'YYYY-MM-DD' ) AND
		TO_CHAR(SIGNUPDATE,'YYYY-MM-DD')<=TO_CHAR( CURRENT_DATE-( (SELECT
		TO_CHAR(CURRENT_DATE,'D')
		FROM DUAL) -2 )+15, 'YYYY-MM-DD' ) ]]>
		ORDER BY SIGNUPDATE DESC
	</select>

	<!-- 회원정보리스트 (필터링) -->
	<select id="searchList"
		resultType="com.onsaem.web.member.service.MemberVO">
		SELECT *
		FROM MEMBERS
		<where>
			<if test="vo.status != null">
				AND STATUS=#{vo.status}
			</if>
			<if test="vo.role != null">
				AND ROLE LIKE '%'||#{vo.role}
			</if>
			<if test="startDate != '' and endDate!=''">			
				<![CDATA[AND TO_CHAR(SIGNUPDATE,'yyyy-MM-dd')>=#{startDate} AND TO_CHAR(SIGNUPDATE,'yyyy-MM-dd')<=#{endDate}]]>
			</if>
		</where>
		ORDER BY SIGNUPDATE DESC
	</select>
</mapper>